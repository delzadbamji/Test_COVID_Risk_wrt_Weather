import osimport sqlite3import pandas as pdfrom tqdm import tqdmfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.preprocessing import OneHotEncoderimport numpy as npimport pickledef runClassifier(df, label):    features = df.to_numpy()    size = features.shape[0]    indexArr = np.random.choice(range(size), int(size * 0.7), replace=False)    arrSet = set(indexArr)    testArr =[]    for i in range(size):        if i not in arrSet:            testArr.append(i)    print(features.shape)    trainingFeatures = features[indexArr]    trainingLabels = label[indexArr]    testFeatures = features[testArr]    testLabels = label[testArr]    print("fitting classifier....")    clf = RandomForestClassifier(n_estimators=100, max_depth=16,                                 n_jobs=-1)    clf.fit(trainingFeatures, trainingLabels)    print("classifier prediction...")    print(clf.score(testFeatures, testLabels))    filename = 'country_clf'    pickleFile = open(filename, 'wb')    pickle.dump(clf, pickleFile)    pickleFile.close()def deleteAttributes(df, names):    for name in names:        del df[name]def main():    conn = sqlite3.connect('coviddb.db')    query = "select * from country_data;"    df = pd.read_sql_query(query, conn)    print(df.columns)    print(df.head())    deleteAttributes(df, ["id", "date"])    one_hot = pd.get_dummies(df.country, prefix='country')    first = set(one_hot.columns)    df = df.drop('country', axis=1)    df = df.join(one_hot)    tempDict = {}    for column in df.columns:        tempDict[column] = df[column].mean()    df = df.fillna(value=tempDict)    print(df.head())    label = df["risk"].to_numpy()    deleteAttributes(df, ['risk'])    runClassifier(df, label)    deleteAttributes(df, ['humidity_mean', 'humidity_std', 'dew_mean', 'dew_std', 'mean_ozone',                          'std_ozone', 'mean_precip', 'std_precip', 'mean_tMax', 'std_tMax',                          'mean_tMin', 'std_tMin', 'mean_uv', 'std_uv'])    runClassifier(df, label)if __name__ == '__main__':    main()